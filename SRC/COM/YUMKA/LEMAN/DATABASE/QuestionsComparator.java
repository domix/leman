// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.hsqldb.jdbcDriver
//
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.yumka.leman.database;

import java.util.Comparator;

// imports+

// imports-

/**
 * Comparator class is used to sort the QuestionsBean objects.
 */
public class QuestionsComparator implements Comparator
// extends+

// extends-
{
  /**
   * Holds the field on which the comparison is performed.
   */
  private int iType;

  /**
   * Value that will contain the information about the order of the sort: normal or reversal.
   */
  private boolean bReverse;

  /**
   * Constructor class for QuestionsComparator.
   * <br>
   * Example:
   * <br>
   * <code>Arrays.sort(pArray, new QuestionsComparator(QuestionsManager.ID, bReverse));<code>
   *
   * @param iType the field from which you want to sort
   * <br>
   * Possible values are:
   * <ul>
   *   <li>QuestionsManager.ID_ID
   *   <li>QuestionsManager.ID_TOPIC
   *   <li>QuestionsManager.ID_QUESTION
   * </ul>
   */
  public QuestionsComparator(int iType) {
    this(iType, false);
  }

  /**
   * Constructor class for QuestionsComparator.
   * <br>
   * Example:
   * <br>
   * <code>Arrays.sort(pArray, new QuestionsComparator(QuestionsManager.ID, bReverse));<code>
   *
   * @param iType the field from which you want to sort.
   * <br>
   * Possible values are:
   * <ul>
   *   <li>QuestionsManager.ID_ID
   *   <li>QuestionsManager.ID_TOPIC
   *   <li>QuestionsManager.ID_QUESTION
   * </ul>
   *
   * @param bReverse set this value to true, if you want to reverse the sorting results
   */
  public QuestionsComparator(int iType, boolean bReverse) {
    this.iType = iType;
    this.bReverse = bReverse;
  }

  /**
   * Implementation of the compare method.
   */
  public int compare(Object pObj1, Object pObj2) {
    QuestionsBean b1 = (QuestionsBean) pObj1;
    QuestionsBean b2 = (QuestionsBean) pObj2;
    int iReturn = 0;
    switch (iType) {
      case QuestionsManager.ID_ID:
        if (b1.getId() == null && b2.getId() != null) {
          iReturn = -1;
        }
        else {
          if (b1.getId() == null && b2.getId() == null) {
            iReturn = 0;
          }
          else {
            if (b1.getId() != null && b2.getId() == null) {
              iReturn = 1;
            }
            else {
              iReturn = b1.getId().compareTo(b2.getId());
            }
          }
        }
        break;
      case QuestionsManager.ID_TOPIC:
        if (b1.getTopic() == null && b2.getTopic() != null) {
          iReturn = -1;
        }
        else {
          if (b1.getTopic() == null && b2.getTopic() == null) {
            iReturn = 0;
          }
          else {
            if (b1.getTopic() != null && b2.getTopic() == null) {
              iReturn = 1;
            }
            else {
              iReturn = b1.getTopic().compareTo(b2.getTopic());
            }
          }
        }
        break;
      case QuestionsManager.ID_QUESTION:
        if (b1.getQuestion() == null && b2.getQuestion() != null) {
          iReturn = -1;
        }
        else {
          if (b1.getQuestion() == null && b2.getQuestion() == null) {
            iReturn = 0;
          }
          else {
            if (b1.getQuestion() != null && b2.getQuestion() == null) {
              iReturn = 1;
            }
            else {
              iReturn = b1.getQuestion().compareTo(b2.getQuestion());
            }
          }
        }
        break;
      default:
        throw new IllegalArgumentException(
            "Type passed for the field is not supported");
    }

    return bReverse ? ( -1 * iReturn) : iReturn;
  }

// class+

// class-
}
