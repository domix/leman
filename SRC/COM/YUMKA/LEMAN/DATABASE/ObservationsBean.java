// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.hsqldb.jdbcDriver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.yumka.leman.database;

import java.util.*;
// imports+ 

// imports- 

public class ObservationsBean
// extends+ 

// extends- 
{
    private Integer id;
    private boolean id_is_modified = false;
    private boolean id_is_initialized = false;
    
    private Integer idevaluationdetail;
    private boolean idevaluationdetail_is_modified = false;
    private boolean idevaluationdetail_is_initialized = false;
    
    private String message;
    private boolean message_is_modified = false;
    private boolean message_is_initialized = false;
    
    private String responsable;
    private boolean responsable_is_modified = false;
    private boolean responsable_is_initialized = false;
    
    private String accion;
    private boolean accion_is_modified = false;
    private boolean accion_is_initialized = false;
    
    private String plazo;
    private boolean plazo_is_modified = false;
    private boolean plazo_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    ObservationsBean()
    {
    }
    
    /**
     * Getter method for id.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: OBSERVATIONS.ID
     * <li>comments: IDENTITY
     * <li>column size: 0
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of id
     */
    public Integer getId()
    {
        return id; 
    }

    /**
     * Setter method for id.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to id
     */
    public void setId(Integer newVal) {
        if ((newVal != null && this.id != null && (newVal.compareTo(this.id) == 0)) || 
            (newVal == null && this.id == null && id_is_initialized)) {
            return; 
        } 
        this.id = newVal; 
        id_is_modified = true; 
        id_is_initialized = true; 
    }

    /**
     * Setter method for id.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to id
     */
    public void setId(int newVal) {
        setId(new Integer(newVal));
    }

    /**
     * Determines if the id has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isIdModified() {
        return id_is_modified; 
    }

    /**
     * Determines if the id has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isIdInitialized() {
        return id_is_initialized; 
    }

    /**
     * Getter method for idevaluationdetail.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: OBSERVATIONS.IDEVALUATIONDETAIL
     * <li> foreign key: EVALUATIONSDETAIL.ID
     * <li>column size: 0
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of idevaluationdetail
     */
    public Integer getIdevaluationdetail()
    {
        return idevaluationdetail; 
    }

    /**
     * Setter method for idevaluationdetail.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to idevaluationdetail
     */
    public void setIdevaluationdetail(Integer newVal) {
        if ((newVal != null && this.idevaluationdetail != null && (newVal.compareTo(this.idevaluationdetail) == 0)) || 
            (newVal == null && this.idevaluationdetail == null && idevaluationdetail_is_initialized)) {
            return; 
        } 
        this.idevaluationdetail = newVal; 
        idevaluationdetail_is_modified = true; 
        idevaluationdetail_is_initialized = true; 
    }

    /**
     * Setter method for idevaluationdetail.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to idevaluationdetail
     */
    public void setIdevaluationdetail(int newVal) {
        setIdevaluationdetail(new Integer(newVal));
    }

    /**
     * Determines if the idevaluationdetail has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isIdevaluationdetailModified() {
        return idevaluationdetail_is_modified; 
    }

    /**
     * Determines if the idevaluationdetail has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isIdevaluationdetailInitialized() {
        return idevaluationdetail_is_initialized; 
    }

    /**
     * Getter method for message.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: OBSERVATIONS.MESSAGE
     * <li>column size: 250
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of message
     */
    public String getMessage()
    {
        return message; 
    }

    /**
     * Setter method for message.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to message
     */
    public void setMessage(String newVal) {
        if ((newVal != null && this.message != null && (newVal.compareTo(this.message) == 0)) || 
            (newVal == null && this.message == null && message_is_initialized)) {
            return; 
        } 
        this.message = newVal; 
        message_is_modified = true; 
        message_is_initialized = true; 
    }

    /**
     * Determines if the message has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMessageModified() {
        return message_is_modified; 
    }

    /**
     * Determines if the message has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMessageInitialized() {
        return message_is_initialized; 
    }

    /**
     * Getter method for responsable.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: OBSERVATIONS.RESPONSABLE
     * <li>column size: 50
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of responsable
     */
    public String getResponsable()
    {
        return responsable; 
    }

    /**
     * Setter method for responsable.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to responsable
     */
    public void setResponsable(String newVal) {
        if ((newVal != null && this.responsable != null && (newVal.compareTo(this.responsable) == 0)) || 
            (newVal == null && this.responsable == null && responsable_is_initialized)) {
            return; 
        } 
        this.responsable = newVal; 
        responsable_is_modified = true; 
        responsable_is_initialized = true; 
    }

    /**
     * Determines if the responsable has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isResponsableModified() {
        return responsable_is_modified; 
    }

    /**
     * Determines if the responsable has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isResponsableInitialized() {
        return responsable_is_initialized; 
    }

    /**
     * Getter method for accion.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: OBSERVATIONS.ACCION
     * <li>column size: 50
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of accion
     */
    public String getAccion()
    {
        return accion; 
    }

    /**
     * Setter method for accion.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to accion
     */
    public void setAccion(String newVal) {
        if ((newVal != null && this.accion != null && (newVal.compareTo(this.accion) == 0)) || 
            (newVal == null && this.accion == null && accion_is_initialized)) {
            return; 
        } 
        this.accion = newVal; 
        accion_is_modified = true; 
        accion_is_initialized = true; 
    }

    /**
     * Determines if the accion has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAccionModified() {
        return accion_is_modified; 
    }

    /**
     * Determines if the accion has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAccionInitialized() {
        return accion_is_initialized; 
    }

    /**
     * Getter method for plazo.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: OBSERVATIONS.PLAZO
     * <li>column size: 50
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of plazo
     */
    public String getPlazo()
    {
        return plazo; 
    }

    /**
     * Setter method for plazo.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to plazo
     */
    public void setPlazo(String newVal) {
        if ((newVal != null && this.plazo != null && (newVal.compareTo(this.plazo) == 0)) || 
            (newVal == null && this.plazo == null && plazo_is_initialized)) {
            return; 
        } 
        this.plazo = newVal; 
        plazo_is_modified = true; 
        plazo_is_initialized = true; 
    }

    /**
     * Determines if the plazo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPlazoModified() {
        return plazo_is_modified; 
    }

    /**
     * Determines if the plazo has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPlazoInitialized() {
        return plazo_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return id_is_modified || 
		idevaluationdetail_is_modified || 
		message_is_modified || 
		responsable_is_modified || 
		accion_is_modified || 
		plazo_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        id_is_modified = false;
        idevaluationdetail_is_modified = false;
        message_is_modified = false;
        responsable_is_modified = false;
        accion_is_modified = false;
        plazo_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ObservationsBean bean) {
        setId(bean.getId());
        setIdevaluationdetail(bean.getIdevaluationdetail());
        setMessage(bean.getMessage());
        setResponsable(bean.getResponsable());
        setAccion(bean.getAccion());
        setPlazo(bean.getPlazo());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[OBSERVATIONS] "
                 + "\n - OBSERVATIONS.ID = " + (id_is_initialized ? ("[" + (id == null ? null : id.toString()) + "]") : "not initialized") + ""
                 + "\n - OBSERVATIONS.IDEVALUATIONDETAIL = " + (idevaluationdetail_is_initialized ? ("[" + (idevaluationdetail == null ? null : idevaluationdetail.toString()) + "]") : "not initialized") + ""
                 + "\n - OBSERVATIONS.MESSAGE = " + (message_is_initialized ? ("[" + (message == null ? null : message.toString()) + "]") : "not initialized") + ""
                 + "\n - OBSERVATIONS.RESPONSABLE = " + (responsable_is_initialized ? ("[" + (responsable == null ? null : responsable.toString()) + "]") : "not initialized") + ""
                 + "\n - OBSERVATIONS.ACCION = " + (accion_is_initialized ? ("[" + (accion == null ? null : accion.toString()) + "]") : "not initialized") + ""
                 + "\n - OBSERVATIONS.PLAZO = " + (plazo_is_initialized ? ("[" + (plazo == null ? null : plazo.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
