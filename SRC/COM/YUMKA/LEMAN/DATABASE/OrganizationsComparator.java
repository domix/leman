// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.hsqldb.jdbcDriver
//
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.yumka.leman.database;

import java.util.Comparator;

// imports+

// imports-

/**
 * Comparator class is used to sort the OrganizationsBean objects.
 */
public class OrganizationsComparator implements Comparator
// extends+

// extends-
{
  /**
   * Holds the field on which the comparison is performed.
   */
  private int iType;

  /**
   * Value that will contain the information about the order of the sort: normal or reversal.
   */
  private boolean bReverse;

  /**
   * Constructor class for OrganizationsComparator.
   * <br>
   * Example:
   * <br>
   * <code>Arrays.sort(pArray, new OrganizationsComparator(OrganizationsManager.ID, bReverse));<code>
   *
   * @param iType the field from which you want to sort
   * <br>
   * Possible values are:
   * <ul>
   *   <li>OrganizationsManager.ID_ID
   *   <li>OrganizationsManager.ID_NAME
   *   <li>OrganizationsManager.ID_ADDRESS
   *   <li>OrganizationsManager.ID_TELEPHONE
   * </ul>
   */
  public OrganizationsComparator(int iType) {
    this(iType, false);
  }

  /**
   * Constructor class for OrganizationsComparator.
   * <br>
   * Example:
   * <br>
   * <code>Arrays.sort(pArray, new OrganizationsComparator(OrganizationsManager.ID, bReverse));<code>
   *
   * @param iType the field from which you want to sort.
   * <br>
   * Possible values are:
   * <ul>
   *   <li>OrganizationsManager.ID_ID
   *   <li>OrganizationsManager.ID_NAME
   *   <li>OrganizationsManager.ID_ADDRESS
   *   <li>OrganizationsManager.ID_TELEPHONE
   * </ul>
   *
   * @param bReverse set this value to true, if you want to reverse the sorting results
   */
  public OrganizationsComparator(int iType, boolean bReverse) {
    this.iType = iType;
    this.bReverse = bReverse;
  }

  /**
   * Implementation of the compare method.
   */
  public int compare(Object pObj1, Object pObj2) {
    OrganizationBean b1 = (OrganizationBean) pObj1;
    OrganizationBean b2 = (OrganizationBean) pObj2;
    int iReturn = 0;
    switch (iType) {
      case OrganizationsManager.ID_ID:
        if (b1.getId() == null && b2.getId() != null) {
          iReturn = -1;
        }
        else {
          if (b1.getId() == null && b2.getId() == null) {
            iReturn = 0;
          }
          else {
            if (b1.getId() != null && b2.getId() == null) {
              iReturn = 1;
            }
            else {
              iReturn = b1.getId().compareTo(b2.getId());
            }
          }
        }
        break;
      case OrganizationsManager.ID_NAME:
        if (b1.getName() == null && b2.getName() != null) {
          iReturn = -1;
        }
        else {
          if (b1.getName() == null && b2.getName() == null) {
            iReturn = 0;
          }
          else {
            if (b1.getName() != null && b2.getName() == null) {
              iReturn = 1;
            }
            else {
              iReturn = b1.getName().compareTo(b2.getName());
            }
          }
        }
        break;
      case OrganizationsManager.ID_ADDRESS:
        if (b1.getAddress() == null && b2.getAddress() != null) {
          iReturn = -1;
        }
        else {
          if (b1.getAddress() == null && b2.getAddress() == null) {
            iReturn = 0;
          }
          else {
            if (b1.getAddress() != null && b2.getAddress() == null) {
              iReturn = 1;
            }
            else {
              iReturn = b1.getAddress().compareTo(b2.getAddress());
            }
          }
        }
        break;
      case OrganizationsManager.ID_TELEPHONE:
        if (b1.getTelephone() == null && b2.getTelephone() != null) {
          iReturn = -1;
        }
        else {
          if (b1.getTelephone() == null && b2.getTelephone() == null) {
            iReturn = 0;
          }
          else {
            if (b1.getTelephone() != null && b2.getTelephone() == null) {
              iReturn = 1;
            }
            else {
              iReturn = b1.getTelephone().compareTo(b2.getTelephone());
            }
          }
        }
        break;
      default:
        throw new IllegalArgumentException(
            "Type passed for the field is not supported");
    }

    return bReverse ? ( -1 * iReturn) : iReturn;
  }

// class+

// class-
}
