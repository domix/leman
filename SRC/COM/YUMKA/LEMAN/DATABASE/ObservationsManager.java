// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.hsqldb.jdbcDriver
//
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.yumka.leman.database;

import java.sql.*;
import java.util.*;
// imports+

// imports-

/**
 * Handles database calls for the OBSERVATIONS table.
 */
public class ObservationsManager
// extends+

// extends-
{

    /**
     * Column ID of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_ID = 0;
    public static final int TYPE_ID = Types.INTEGER;
    public static final String NAME_ID = "ID";

    /**
     * Column IDEVALUATIONDETAIL of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_IDEVALUATIONDETAIL = 1;
    public static final int TYPE_IDEVALUATIONDETAIL = Types.INTEGER;
    public static final String NAME_IDEVALUATIONDETAIL = "IDEVALUATIONDETAIL";

    /**
     * Column MESSAGE of type Types.VARCHAR mapped to String.
     */
    public static final int ID_MESSAGE = 2;
    public static final int TYPE_MESSAGE = Types.VARCHAR;
    public static final String NAME_MESSAGE = "MESSAGE";

    /**
     * Column RESPONSABLE of type Types.VARCHAR mapped to String.
     */
    public static final int ID_RESPONSABLE = 3;
    public static final int TYPE_RESPONSABLE = Types.VARCHAR;
    public static final String NAME_RESPONSABLE = "RESPONSABLE";

    /**
     * Column ACCION of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ACCION = 4;
    public static final int TYPE_ACCION = Types.VARCHAR;
    public static final String NAME_ACCION = "ACCION";

    /**
     * Column PLAZO of type Types.VARCHAR mapped to String.
     */
    public static final int ID_PLAZO = 5;
    public static final int TYPE_PLAZO = Types.VARCHAR;
    public static final String NAME_PLAZO = "PLAZO";


    private static final String TABLE_NAME = "OBSERVATIONS";

    /**
     * Create an array of type string containing all the fields of the OBSERVATIONS table.
     */
    private static final String[] FIELD_NAMES =
    {
        "OBSERVATIONS.ID"
        ,"OBSERVATIONS.IDEVALUATIONDETAIL"
        ,"OBSERVATIONS.MESSAGE"
        ,"OBSERVATIONS.RESPONSABLE"
        ,"OBSERVATIONS.ACCION"
        ,"OBSERVATIONS.PLAZO"
    };

    /**
     * Field that contains the comma separated fields of the OBSERVATIONS table.
     */
    private static final String ALL_FIELDS = "OBSERVATIONS.ID"
                            + ",OBSERVATIONS.IDEVALUATIONDETAIL"
                            + ",OBSERVATIONS.MESSAGE"
                            + ",OBSERVATIONS.RESPONSABLE"
                            + ",OBSERVATIONS.ACCION"
                            + ",OBSERVATIONS.PLAZO";

    private static ObservationsManager singleton = new ObservationsManager();

    /**
     * Get the ObservationsManager singleton.
     *
     * @return ObservationsManager
     */
    synchronized public static ObservationsManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own ObservationsManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(ObservationsManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new ObservationsBean instance.
     *
     * @return the new ObservationsBean
     */
    public ObservationsBean createObservationsBean()
    {
        return new ObservationsBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a ObservationsBean from the OBSERVATIONS using its key fields.
     *
     * @return a unique ObservationsBean
     */
    //12
    public ObservationsBean loadByPrimaryKey(Integer id) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM OBSERVATIONS WHERE OBSERVATIONS.ID=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, id);
            ObservationsBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Integer id) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from OBSERVATIONS WHERE OBSERVATIONS.ID=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, id);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // FOREIGN KEY METHODS
    //////////////////////////////////////

    /**
     * Loads ObservationsBean array from the OBSERVATIONS table using its IDEVALUATIONDETAIL field.
     *
     * @return an array of ObservationsBean
     */
    // LOAD BY IMPORTED KEY
    public ObservationsBean[] loadByIdevaluationdetail(Integer value) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM OBSERVATIONS WHERE IDEVALUATIONDETAIL=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the OBSERVATIONS table by IDEVALUATIONDETAIL field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByIdevaluationdetail(Integer value) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM OBSERVATIONS WHERE IDEVALUATIONDETAIL=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the EvaluationsdetailBean object from the OBSERVATIONS.ID field.
     *
     * @param pObject the ObservationsBean
     * @return the associated EvaluationsdetailBean pObject
     */
    // GET IMPORTED
    public EvaluationsdetailBean getEvaluationsdetailBean(ObservationsBean pObject) throws SQLException
    {
        EvaluationsdetailBean other = EvaluationsdetailManager.getInstance().createEvaluationsdetailBean();
        other.setId(pObject.getIdevaluationdetail());
        return EvaluationsdetailManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ObservationsBean object to the EvaluationsdetailBean object.
     *
     * @param pObject the ObservationsBean object to use
     * @param pObjectToBeSet the EvaluationsdetailBean object to associate to the ObservationsBean
     * @return the associated EvaluationsdetailBean pObject
     */
    // SET IMPORTED
    public ObservationsBean setEvaluationsdetailBean(ObservationsBean pObject,EvaluationsdetailBean pObjectToBeSet)
    {
        pObject.setIdevaluationdetail(pObjectToBeSet.getId());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from OBSERVATIONS.
     *
     * @return an array of ObservationsManager pObject
     */
    //38
    public ObservationsBean[] loadAll() throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM OBSERVATIONS",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of ObservationsBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting ObservationsBean table
     */
    //49
    public ObservationsBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of ObservationsBean given a sql where clause, and a list of fields.
     * You must use the 'WHERE' keyword.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting ObservationsBean table
     */
    //51
    public ObservationsBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from OBSERVATIONS " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from OBSERVATIONS ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (ObservationsBean[])v.toArray(new ObservationsBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes rows from the OBSERVATIONS table using a 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM OBSERVATIONS WHERE " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the ObservationsBean pObject into the database.
     *
     * @param pObject the ObservationsBean pObject to be saved
     */
    //100
    public ObservationsBean save(ObservationsBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into OBSERVATIONS (");

                /*if (pObject.isIdModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("ID");
                    _dirtyCount++;
                }*/

                if (pObject.isIdevaluationdetailModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("IDEVALUATIONDETAIL");
                    _dirtyCount++;
                }

                if (pObject.isMessageModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("MESSAGE");
                    _dirtyCount++;
                }

                if (pObject.isResponsableModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("RESPONSABLE");
                    _dirtyCount++;
                }

                if (pObject.isAccionModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("ACCION");
                    _dirtyCount++;
                }

                if (pObject.isPlazoModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("PLAZO");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                //ps = c.prepareStatement(_sql.toString(), Statement.RETURN_GENERATED_KEYS);
                ps = c.prepareStatement(_sql.toString());
                _dirtyCount = 0;

                /*if (pObject.isIdModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getId());
                }*/

                if (pObject.isIdevaluationdetailModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getIdevaluationdetail());
                }

                if (pObject.isMessageModified()) {
                    ps.setString(++_dirtyCount, pObject.getMessage());
                }

                if (pObject.isResponsableModified()) {
                    ps.setString(++_dirtyCount, pObject.getResponsable());
                }

                if (pObject.isAccionModified()) {
                    ps.setString(++_dirtyCount, pObject.getAccion());
                }

                if (pObject.isPlazoModified()) {
                    ps.setString(++_dirtyCount, pObject.getPlazo());
                }

                ps.executeUpdate();
                /*if (!pObject.isIdModified())
                {
                    ResultSet rs = ps.getGeneratedKeys();
                    try {
                        if(rs.next())
                            pObject.setId(Manager.getInteger(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve auto generated key!");
                    } finally {
                        getManager().close(rs);
                    }
                }*/

                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else
            { // UPDATE
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE OBSERVATIONS SET ");
                boolean useComma=false;

                /*if (pObject.isIdModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("ID").append("=?");
                }*/

                if (pObject.isIdevaluationdetailModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("IDEVALUATIONDETAIL").append("=?");
                }

                if (pObject.isMessageModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("MESSAGE").append("=?");
                }

                if (pObject.isResponsableModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("RESPONSABLE").append("=?");
                }

                if (pObject.isAccionModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("ACCION").append("=?");
                }

                if (pObject.isPlazoModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("PLAZO").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("OBSERVATIONS.ID=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                /*if (pObject.isIdModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getId());
                }*/

                if (pObject.isIdevaluationdetailModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getIdevaluationdetail());
                }

                if (pObject.isMessageModified()) {
                      ps.setString(++_dirtyCount, pObject.getMessage());
                }

                if (pObject.isResponsableModified()) {
                      ps.setString(++_dirtyCount, pObject.getResponsable());
                }

                if (pObject.isAccionModified()) {
                      ps.setString(++_dirtyCount, pObject.getAccion());
                }

                if (pObject.isPlazoModified()) {
                      ps.setString(++_dirtyCount, pObject.getPlazo());
                }

                if (_dirtyCount == 0) {
                     return pObject;
                }

                Manager.setInteger(ps, ++_dirtyCount, pObject.getId());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }

            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of ObservationsBean pObjects into the database.
     *
     * @param pObjects the ObservationsBean pObject table to be saved
     * @return the Objects to be saved
     * TODO: BATCH UPDATE
     */
    //65
    public ObservationsBean[] save(ObservationsBean[] pObjects) throws SQLException
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique ObservationsBean pObject from a template one giving a c
     *
     * @param pObject the ObservationsBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public ObservationsBean loadUniqueUsingTemplate(ObservationsBean pObject) throws SQLException
    {
         ObservationsBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of ObservationsBean from a template one.
     *
     * @param pObject the ObservationsBean template to look for
     * @return all the ObservationsBean matching the template
     */
    //88
    public ObservationsBean[] loadUsingTemplate(ObservationsBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from OBSERVATIONS WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;

             if (pObject.isIdModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ID= ?");
             }

             if (pObject.isIdevaluationdetailModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("IDEVALUATIONDETAIL= ?");
             }

             if (pObject.isMessageModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("MESSAGE= ?");
             }

             if (pObject.isResponsableModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("RESPONSABLE= ?");
             }

             if (pObject.isAccionModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ACCION= ?");
             }

             if (pObject.isPlazoModified()) {
                 _dirtyCount ++;
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("PLAZO= ?");
             }

             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;

             if (pObject.isIdModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getId());
             }

             if (pObject.isIdevaluationdetailModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getIdevaluationdetail());
             }

             if (pObject.isMessageModified()) {
                 ps.setString(++_dirtyCount, pObject.getMessage());
             }

             if (pObject.isResponsableModified()) {
                 ps.setString(++_dirtyCount, pObject.getResponsable());
             }

             if (pObject.isAccionModified()) {
                 ps.setString(++_dirtyCount, pObject.getAccion());
             }

             if (pObject.isPlazoModified()) {
                 ps.setString(++_dirtyCount, pObject.getPlazo());
             }

             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a ObservationsBean template.
     *
     * @param pObject the ObservationsBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(ObservationsBean pObject) throws SQLException
    {
        if (pObject.isIdInitialized())
            return deleteByPrimaryKey(pObject.getId());

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            sql = new StringBuffer("DELETE FROM OBSERVATIONS WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isIdInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("ID").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isIdevaluationdetailInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("IDEVALUATIONDETAIL").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isMessageInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("MESSAGE").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isResponsableInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("RESPONSABLE").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isAccionInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("ACCION").append("=?");
                _dirtyAnd ++;
            }

            if (pObject.isPlazoInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("PLAZO").append("=?");
                _dirtyAnd ++;
            }

            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;

            if (pObject.isIdInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getId());
            }

            if (pObject.isIdevaluationdetailInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getIdevaluationdetail());
            }

            if (pObject.isMessageInitialized()) {
                ps.setString(++_dirtyCount, pObject.getMessage());
            }

            if (pObject.isResponsableInitialized()) {
                ps.setString(++_dirtyCount, pObject.getResponsable());
            }

            if (pObject.isAccionInitialized()) {
                ps.setString(++_dirtyCount, pObject.getAccion());
            }

            if (pObject.isPlazoInitialized()) {
                ps.setString(++_dirtyCount, pObject.getPlazo());
            }

            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table OBSERVATIONS.
     *
     * @return the number of rows returned
     */
    //78
    public int count() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table OBSERVATIONS with a 'where' clause.
     * You must use the 'WHERE' keyword.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from OBSERVATIONS " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table OBSERVATIONS with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific ObservationsBean pObject given a c
     *
     * @param pObject the ObservationsBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(ObservationsBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;

        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from OBSERVATIONS WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;

                if (pObject.isIdModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ID= ?");
                }

                if (pObject.isIdevaluationdetailModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("IDEVALUATIONDETAIL= ?");
                }

                if (pObject.isMessageModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("MESSAGE= ?");
                }

                if (pObject.isResponsableModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("RESPONSABLE= ?");
                }

                if (pObject.isAccionModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ACCION= ?");
                }

                if (pObject.isPlazoModified()) {
                    _dirtyCount++;
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("PLAZO= ?");
                }

                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");

                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

                _dirtyCount = 0;

                if (pObject.isIdModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getId());
                }

                if (pObject.isIdevaluationdetailModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getIdevaluationdetail());
                }

                if (pObject.isMessageModified()) {
                    ps.setString(++_dirtyCount, pObject.getMessage());
                }

                if (pObject.isResponsableModified()) {
                    ps.setString(++_dirtyCount, pObject.getResponsable());
                }

                if (pObject.isAccionModified()) {
                    ps.setString(++_dirtyCount, pObject.getAccion());
                }

                if (pObject.isPlazoModified()) {
                    ps.setString(++_dirtyCount, pObject.getPlazo());
                }

                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the OBSERVATIONS on a ObservationsBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting ObservationsBean pObject
     */
    //72
    public ObservationsBean decodeRow(ResultSet rs) throws SQLException
    {
        ObservationsBean pObject = createObservationsBean();
        pObject.setId(Manager.getInteger(rs, 1));
        pObject.setIdevaluationdetail(Manager.getInteger(rs, 2));
        pObject.setMessage(rs.getString(3));
        pObject.setResponsable(rs.getString(4));
        pObject.setAccion(rs.getString(5));
        pObject.setPlazo(rs.getString(6));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the OBSERVATIONS table on a ObservationsBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting ObservationsBean pObject
     */
    //73
    public ObservationsBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        ObservationsBean pObject = createObservationsBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_ID:
                    ++pos;
                    pObject.setId(Manager.getInteger(rs, pos));
                    break;
                case ID_IDEVALUATIONDETAIL:
                    ++pos;
                    pObject.setIdevaluationdetail(Manager.getInteger(rs, pos));
                    break;
                case ID_MESSAGE:
                    ++pos;
                    pObject.setMessage(rs.getString(pos));
                    break;
                case ID_RESPONSABLE:
                    ++pos;
                    pObject.setResponsable(rs.getString(pos));
                    break;
                case ID_ACCION:
                    ++pos;
                    pObject.setAccion(rs.getString(pos));
                    break;
                case ID_PLAZO:
                    ++pos;
                    pObject.setPlazo(rs.getString(pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of ObservationsBean
     */
    //41
    public ObservationsBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of ObservationsBean
     */
    public ObservationsBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }
            return (ObservationsBean[])v.toArray(new ObservationsBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER
    ///////////////////////////////////////////////////////////////////////
    private ObservationsListener listener = null;

    /**
     * Registers a unique ObservationsListener listener.
     */
    //66.5
    public void registerListener(ObservationsListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the ObservationsBean pObject.
     *
     * @param pObject the ObservationsBean pObject to be saved
     */
    //67
    void beforeInsert(ObservationsBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the ObservationsBean pObject.
     *
     * @param pObject the ObservationsBean pObject to be saved
     */
    //68
    void afterInsert(ObservationsBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the ObservationsBean pObject.
     *
     * @param pObject the ObservationsBean pObject to be updated
     */
    //69
    void beforeUpdate(ObservationsBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the ObservationsBean pObject.
     *
     * @param pObject the ObservationsBean pObject to be updated
     */
    //70
    void afterUpdate(ObservationsBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+

// class-
}
